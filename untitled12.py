# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Du0SVoYG1bmPu6DPEg1R1ekf3WiZyTid
"""

import pandas as pd # For general data representation
import numpy as np # For general data manipulation
import seaborn as sns # For graphing
import matplotlib.pyplot as plt # For graphing/combining different plots
from collections import defaultdict # For counting

from google.colab import files
uploaded = files.upload()

food_data = pd.read_csv("epi_r.csv")
food_data.head()

# make all tags integers
integer_columns = food_data.columns[6:]

# Convert all the ingredients columns to be integers no floats for better performance and to better represent them as binary variables
temp = {}
for column in integer_columns:
    temp[column] = int
food_data = food_data.astype(temp)


# remove all rows with more than 10000 calories
food_data = food_data[food_data['rating'] >= 0] # Ratings should be between 0 and 5
food_data = food_data[food_data['rating'] <= 5]
food_data = food_data[food_data['calories'] < 10000] # anything above 10000, we'll consider an error.
food_data = food_data[food_data['protein'] < 5000] # anything above 5000, we'll consider an error.
food_data = food_data[food_data['fat'] < 5000] # anything above 5000, we'll consider an error.
food_data = food_data[food_data['sodium'] < 5000] # anything above 5000, we'll consider an error.

# Remove NaNs
food_data.dropna(inplace=True)

# Compile number of tags used in each row
tags = food_data.columns[6:]
row_counts = []
for index, row in food_data.iterrows():
    count = 0
    for tag in tags:
        if row[tag] == 1:
            count += 1
    row_counts.append(count)

# insert the new column at index 5
#food_data.insert (5, 'tags_count', row_counts)

# Remove title as it has no use in the data set
#food_data.drop(columns=['title'], axis = 1, inplace = True)
print(food_data.head())

fig = plt.figure()
fig.subplots_adjust(hspace=0.4, wspace=0.4)
variables = ["rating","calories","protein","fat","sodium", "tags_count"]

fig.set_size_inches(18.5, 15.5)
for i in range(len(variables)):
    ax = fig.add_subplot(6, 1, i + 1)
    if variables[i] == 'rating':
        sns.distplot(food_data[variables[i]],bins=[0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5], ax=ax)
    else:
        sns.distplot(food_data[variables[i]], ax=ax)
    #ax.set_title(variables[i])
plt.show()

tags_count = defaultdict(lambda: 0) # map to count ingrdients

# count each ingredient
for index, row in food_data.iterrows():
    for tag in tags:
        if row[tag] == 1:
            tags_count[tag] += 1
tags_count = dict(tags_count)
total_rows = len(food_data.index)

# sort them and change count to percentage
tags_count = {k: v/total_rows for k, v in sorted(tags_count.items(), key=lambda item: item[1], reverse = True)}# sort by count

# putting it into a list to ensure correct ordering(calling .keys()/.values can cause reordering sometimes)
plot_tags = []
plot_count = []
for k,v in tags_count.items():
    plot_tags.append(k)
    plot_count.append(v)

# set plot size and color scheme
sns.set(rc={'figure.figsize':(11.7,10.27),"axes.labelsize":2})
sns.color_palette("mako")
# Use seaborn to plot bar plot
plot = sns.barplot(x=plot_count[:20], y=plot_tags[:20])
plot.set_xlabel("Frequency in recipes",fontsize=20)
plot.set_ylabel("Tags",fontsize=20)
plot.set_title("Most Popular Tags",fontsize = 25)

# We add the jitter to make the distribution of data points clearer, it does not influence the regression at all
fig = plt.figure()
fig.set_size_inches(18.5, 15.5)
fig.subplots_adjust(hspace=0.4, wspace=0.4)
predictors = ["calories","protein","fat","sodium","tags_count"]

# For each predictor, make a subplot and add jitters to it
for i in range(len(predictors)):
    ax = fig.add_subplot(3, 2, i + 1)
    ax.set(ylim=(0, 8))
    if predictors[i] == "tags_count":
        sns.regplot(x="tags_count", y="rating", data=food_data, x_jitter = .45, y_jitter = .45, scatter_kws={"color": "blue"}, line_kws={"color": "red"}, ax=ax)
    else:
        sns.regplot(x=predictors[i], y="rating", data=food_data, y_jitter=.2, scatter_kws={"color": "blue"}, line_kws={"color": "red"}, ax=ax)
    ax.set_title(predictors[i], fontsize = 20)
    ax.set_ylabel('Ratings', fontsize = 15)

plt.show()

df_sorted = food_data.sort_values(by=['rating','calories'],ascending =[False,True])
df_sorted.reset_index(drop=True,inplace = True)
df_sorted.lunch.unique()

lunch=food_data[food_data['lunch']==1.0]
lunch.shape

dinner=food_data[food_data['dinner']==1.0]
dinner.shape

breakfast=food_data[food_data['breakfast']==1.0]
breakfast.shape

print(breakfast.sample())
print(lunch.sample())
print(dinner.sample())

veg = food_data[food_data['vegetarian']==1.0]
veg.shape

nonveg = food_data[food_data['vegetarian']==0.0]
nonveg.shape

veg.calories.hist(bins =30)
plt.title('Calories in veg dishes')
plt.show()

nonveg.calories.hist(bins=30)
plt.title('calories in non veg dishes')
plt.show()

plt.hist([veg['calories'],nonveg['calories']])

food_data.info()

corr_matrix =food_data.iloc[:,1:6].corr().abs()
corr_matrix

food_data.head()